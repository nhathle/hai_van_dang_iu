document.addEventListener('DOMContentLoaded', () => {
    const initialScreen = document.getElementById('initial-screen');
    const scanButton = document.getElementById('scan-button');
    const confessionScreen = document.getElementById('confession-screen');
    const subtitleContainer = document.getElementById('subtitle-container');
    const subtitleTextElement = document.getElementById('subtitle-text');
    const backgroundMusic = document.getElementById('background-music'); // TH√äM D√íNG N√ÄY


    const phrases = [
        "Em b√© H·∫£i V√¢n xinh ngoan iu",
        "Ti·ªÉu m·∫∑t tr·ªùi m√™ h·∫£i c√° b√© b·ªèng",
        "Ho·∫°t b√°t ƒë√°ng iuuu ‚ô°",
        "R·ª±c r·ª° t·ªèa s√°ng ‚ô°",
        "M√¥i ƒë·ªè m√° h·ªìng", // L·ªùi tho·∫°i t·ª´ video
        "Tim anh rung ƒë·ªông v√¨ n√†ng ‚ô°"
    ];

    const hearts = ["‚ù§Ô∏è", "üíñ", "üíï", "üíó"]; // C√°c lo·∫°i tr√°i tim kh√°c nhau

    // L·ªùi tho·∫°i / L·ªùi b√†i h√°t l·ªõn xu·∫•t hi·ªán tu·∫ßn t·ª±
    const subtitles = [
        { text: "G·ª≠i ƒë·∫øn H·∫£i V√¢n th√¢n th∆∞∆°ng ‚ù§Ô∏è", duration: 3000 },
        { text: "Em h√£y c∆∞·ªùi nhi·ªÅu l√™n nh√©!", duration: 3500 },
        { text: "NƒÉng l∆∞·ª£ng em mang ƒë·∫øn t√¢m h·ªìn anh", duration: 4300 },
        { text: "Si√™u ·∫•m √°p, l√†m l√≤ng anh tan ch·∫£y", duration: 5000 },
        { text: "Anh th√≠ch em nhi·ªÅu!!!", duration: 5000 },
    ];
    let currentSubtitleIndex = 0;
    let textInterval, heartInterval, subtitleTimeout;

    function getRandomPosition(element) {
        const x = Math.random() * (confessionScreen.offsetWidth - element.offsetWidth - 20) + 10; // 10px padding
        const y = Math.random() * (confessionScreen.offsetHeight - element.offsetHeight - 20) + 10;
        return { x, y };
    }

    function createFloatingElement(content, typeClass) {
        const element = document.createElement('div');
        element.classList.add(typeClass);
        element.innerHTML = content;

        // ƒê·∫∑t v·ªã tr√≠ ban ƒë·∫ßu tr∆∞·ªõc khi l·∫•y k√≠ch th∆∞·ªõc
        element.style.left = '-9999px'; // T·∫°m th·ªùi ƒë·∫∑t ra ngo√†i m√†n h√¨nh ƒë·ªÉ l·∫•y k√≠ch th∆∞·ªõc ch√≠nh x√°c
        element.style.top = '-9999px';
        confessionScreen.appendChild(element);
        
        const { x, y } = getRandomPosition(element);
        element.style.left = `${x}px`;
        element.style.top = `${y}px`;

        // Th·ªùi gian animation ng·∫´u nhi√™n ƒë·ªÉ kh√¥ng ƒë·ªìng b·ªô
        const duration = Math.random() * 3 + 4; // T·ª´ 4 ƒë·∫øn 7 gi√¢y
        element.style.animationDuration = `${duration}s`;
        
        // Ng·∫´u nhi√™n ƒë·ªô tr·ªÖ animation
        const delay = Math.random() * 2; // Tr·ªÖ t·ªëi ƒëa 2 gi√¢y
        element.style.animationDelay = `${delay}s`;

        // X√≥a ph·∫ßn t·ª≠ sau khi animation k·∫øt th√∫c ƒë·ªÉ tr√°nh ƒë·∫ßy DOM
        element.addEventListener('animationend', () => {
            element.remove();
        });
    }

    function startGeneratingElements() {
        // T·∫°o ch·ªØ
        textInterval = setInterval(() => {
            const randomPhrase = phrases[Math.floor(Math.random() * phrases.length)];
            createFloatingElement(randomPhrase, 'floating-text');
        }, 800); // T·∫°o ch·ªØ m·ªõi m·ªói 0.8 gi√¢y

        // T·∫°o tr√°i tim
        heartInterval = setInterval(() => {
            const randomHeart = hearts[Math.floor(Math.random() * hearts.length)];
            createFloatingElement(randomHeart, 'floating-heart');
        }, 400); // T·∫°o tim m·ªõi m·ªói 0.4 gi√¢y
    }

    function stopGeneratingElements() {
        clearInterval(textInterval);
        clearInterval(heartInterval);
        if (subtitleTimeout) clearTimeout(subtitleTimeout);
    }

    function showNextSubtitle() {
        if (currentSubtitleIndex < subtitles.length) {
            const current = subtitles[currentSubtitleIndex];
            subtitleTextElement.textContent = current.text;
            subtitleTextElement.style.opacity = '1'; // Hi·ªán subtitle

            // ·∫®n subtitle sau m·ªôt kho·∫£ng th·ªùi gian
            subtitleTimeout = setTimeout(() => {
                subtitleTextElement.style.opacity = '0';
                // Sau khi ·∫©n, ch·ªù m·ªôt ch√∫t r·ªìi hi·ªán subtitle ti·∫øp theo
                setTimeout(() => {
                    currentSubtitleIndex++;
                    showNextSubtitle();
                }, 500); // Ch·ªù 0.5s tr∆∞·ªõc khi ƒë·ªïi subtitle
            }, current.duration - 500); // Tr·ª´ 0.5s ƒë·ªÉ c√≥ th·ªùi gian m·ªù d·∫ßn

        } else {
            // K·∫øt th√∫c subtitles, c√≥ th·ªÉ l√†m g√¨ ƒë√≥ ·ªü ƒë√¢y, v√≠ d·ª• d·ª´ng hi·ªáu ·ª©ng ho·∫∑c l·∫∑p l·∫°i
            console.log("H·∫øt l·ªùi tho·∫°i/b√†i h√°t.");
            // stopGeneratingElements(); // V√≠ d·ª•: d·ª´ng t·∫°o ph·∫ßn t·ª≠ m·ªõi
        }
    }

    function startConfession() {
        initialScreen.classList.add('hidden'); // ·∫®n m√†n h√¨nh ban ƒë·∫ßu
        confessionScreen.classList.remove('hidden'); // Hi·ªán m√†n h√¨nh t·ªè t√¨nh
        subtitleContainer.classList.remove('hidden'); // Hi·ªán khung ch·ª©a subtitle

    // Ph√°t nh·∫°c n·ªÅn
    if (backgroundMusic) {
        // T·∫£i l·∫°i nh·∫°c ƒë·ªÉ ƒë·∫£m b·∫£o ph√°t t·ª´ ƒë·∫ßu n·∫øu ƒë√£ t·ª´ng ph√°t tr∆∞·ªõc ƒë√≥
        backgroundMusic.load(); // Kh√¥ng b·∫Øt bu·ªôc n·∫øu b·∫°n lu√¥n mu·ªën n√≥ ti·∫øp t·ª•c t·ª´ ƒëi·ªÉm d·ª´ng
        backgroundMusic.play().catch(error => {
            console.warn("Kh√¥ng th·ªÉ t·ª± ƒë·ªông ph√°t nh·∫°c. Tr√¨nh duy·ªát c√≥ th·ªÉ y√™u c·∫ßu t∆∞∆°ng t√°c ng∆∞·ªùi d√πng tr∆∞·ªõc.", error);
            // B·∫°n c√≥ th·ªÉ th√¥ng b√°o cho ng∆∞·ªùi d√πng ho·∫∑c cung c·∫•p m·ªôt n√∫t ƒë·ªÉ h·ªç t·ª± b·∫≠t nh·∫°c
        });
    }

        startGeneratingElements();
        showNextSubtitle(); // B·∫Øt ƒë·∫ßu hi·ªÉn th·ªã chu·ªói l·ªùi tho·∫°i
    }

    scanButton.addEventListener('click', startConfession);

    // ƒê·ªÉ d·ªÖ debug, c√≥ th·ªÉ t·ª± ƒë·ªông b·∫Øt ƒë·∫ßu sau 1 gi√¢y n·∫øu kh√¥ng mu·ªën click
    // setTimeout(startConfession, 1000);

    // D·ªçn d·∫πp khi trang b·ªã ƒë√≥ng ho·∫∑c chuy·ªÉn h∆∞·ªõng (t√πy ch·ªçn)
    // window.addEventListener('beforeunload', stopGeneratingElements);
});